generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    userId        String            @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    email         String            @unique
    fullName      String
    password      String?
    avatarUrl     String
    refreshToken  String?
    roles         HasRole[]
    authProviders HasAuthProvider[]
}

model HasAuthProvider {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId         String       @db.ObjectId
    user           User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
    authProviderId String       @db.ObjectId
    authProvider   AuthProvider @relation(fields: [authProviderId], references: [id], onDelete: Cascade)
}

model AuthProvider {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    providerName String @unique
    users        HasAuthProvider[]
}

model Role {
    roleId    String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title String    @unique
    users HasRole[]
}

model HasRole {
    hasRoleId String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String @db.ObjectId
    roleId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)
    role   Role   @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
}
